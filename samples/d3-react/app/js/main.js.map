{"version":3,"sources":["webpack:///webpack/bootstrap 14ebad6c3d8b1e78ff72","webpack:///./src/main.fsx","webpack:///external \"electron\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;ACtCA;;AAaQ;AAAU;AACd;AACA;AAGqB;AACrB;AACA;AAEa;AAGb,oBAAe,wCAAf;AASA,yBAII;AAAA;AAAyB,MAJ7B;AAOA;AA5BW;;AAgCf,oCAA+B;AAAA;AAAgB,EAA/C;;AAGA,gDAGI;AAAA,SAAG,6BAAH,EACI;AAAA;AAAmB;AAAA,EAJ3B;;AAOA,uCAGI;AAAA,SAAG;AAAA;AAAA,QAAH,EACI;AAAA;AAAkB;AAAA,EAJ1B;;;;;;;ACvDA,sC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 14ebad6c3d8b1e78ff72","#r \"../node_modules/fable-core/Fable.Core.dll\"\n#load \"../node_modules/fable-import-electron/Fable.Import.Electron.fs\"\n\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Fable.Import\nopen Fable.Import.Electron\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mutable mainWindow: BrowserWindow option = Option.None\n\nlet createMainWindow () =\n    let options = createEmpty<BrowserWindowOptions>\n    options.width <- Some 800.\n    options.height <- Some 600.\n    \n    //we need this to make grid work\n    let webPreferences = createEmpty<WebPreferences>\n    webPreferences.experimentalFeatures <- Some true\n    options.webPreferences <- Some webPreferences\n\n    let window = electron.BrowserWindow.Create(options)\n\n    // Load the index.html of the app.\n    window.loadURL(\"file://\" + Node.__dirname + \"/../index.html\");\n\n    #if DEBUG\n    fs.watch(Node.__dirname + \"/renderer.js\", fun _ ->\n        window.webContents.reloadIgnoringCache() |> ignore\n    ) |> ignore\n    #endif\n\n    // Emitted when the window is closed.\n    window.on(\"closed\", unbox(fun () ->\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow <- Option.None\n    )) |> ignore\n\n    mainWindow <- Some window\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\nelectron.app.on(\"ready\", unbox createMainWindow)\n\n// Quit when all windows are closed.\nelectron.app.on(\"window-all-closed\", unbox(fun () ->\n    // On OS X it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if Node.``process``.platform <> \"darwin\" then\n        electron.app.quit()\n))\n\nelectron.app.on(\"activate\", unbox(fun () ->\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if mainWindow.IsNone then\n        createMainWindow()\n))\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.fsx","module.exports = require(\"electron\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"electron\"\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}